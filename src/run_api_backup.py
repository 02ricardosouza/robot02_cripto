# -*- coding: utf-8 -*-
import os
import sys
from pathlib import Path
from datetime import datetime
import io

# Configura√ß√£o expl√≠cita de codifica√ß√£o para entrada/sa√≠da padr√£o
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

# Adiciona o diret√≥rio src ao path do Python para importa√ß√µes
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Verifica se a pasta de logs existe, caso contr√°rio, cria
logs_dir = Path('src/logs')
if not logs_dir.exists():
    logs_dir.mkdir(parents=True, exist_ok=True)

# Importa e executa a API
try:
    # Configura√ß√£o do banco de dados
    from Models.database import setup_db
    
    # Configura√ß√£o da autentica√ß√£o
    from auth import setup_auth
    
    # Importa a aplica√ß√£o Flask
    from api import app
    
    # Configura√ß√£o do template com contexto para o ano atual
    @app.context_processor
    def inject_now():
        return {'now': datetime.utcnow()}
    
    # Configura√ß√£o do banco de dados
    setup_db(app)
    
    # Configura√ß√£o da autentica√ß√£o
    setup_auth(app)
    
    # Rotas para renderizar a interface web
    from flask import render_template
    
    @app.route('/')
    def index():
        return render_template('index.html')

    # Adiciona rota para a p√°gina de logs em tempo real
    @app.route('/logs')
    def logs_page():
        return render_template('logs.html')
    
    if __name__ == '__main__':
        print("ü§ñ API e Interface do Rob√¥ de Criptomoedas iniciando...")
        print("üåê Acesse http://localhost:5001 para abrir a interface")
        print("üìä Acesse http://localhost:5001/logs para ver os logs em tempo real")
        app.run(debug=True, host='0.0.0.0', port=5001)
except Exception as e:
    print(f"Erro ao iniciar API: {str(e)}")
    sys.exit(1) 